// Generated by data binding compiler. Do not edit!
package com.stonetree.view.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.airbnb.lottie.LottieAnimationView;
import com.stonetree.view.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ViewCoreBinding extends ViewDataBinding {
  @NonNull
  public final LottieAnimationView coreFailureAnimView;

  @NonNull
  public final TextView coreFailureMessage;

  @NonNull
  public final LottieAnimationView coreLoadingAnimView;

  @NonNull
  public final Button coreRetryButton;

  @Bindable
  protected View.OnClickListener mRetry;

  @Bindable
  protected int mNetwork;

  protected ViewCoreBinding(Object _bindingComponent, View _root, int _localFieldCount,
      LottieAnimationView coreFailureAnimView, TextView coreFailureMessage,
      LottieAnimationView coreLoadingAnimView, Button coreRetryButton) {
    super(_bindingComponent, _root, _localFieldCount);
    this.coreFailureAnimView = coreFailureAnimView;
    this.coreFailureMessage = coreFailureMessage;
    this.coreLoadingAnimView = coreLoadingAnimView;
    this.coreRetryButton = coreRetryButton;
  }

  public abstract void setRetry(@Nullable View.OnClickListener retry);

  @Nullable
  public View.OnClickListener getRetry() {
    return mRetry;
  }

  public abstract void setNetwork(int network);

  public int getNetwork() {
    return mNetwork;
  }

  @NonNull
  public static ViewCoreBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.view_core, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ViewCoreBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ViewCoreBinding>inflateInternal(inflater, R.layout.view_core, root, attachToRoot, component);
  }

  @NonNull
  public static ViewCoreBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.view_core, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ViewCoreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ViewCoreBinding>inflateInternal(inflater, R.layout.view_core, null, false, component);
  }

  public static ViewCoreBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ViewCoreBinding bind(@NonNull View view, @Nullable Object component) {
    return (ViewCoreBinding)bind(component, view, R.layout.view_core);
  }
}
